using xml

class FileUtil
{
  static const File projectDirectory := Env.cur.homeDir + `projects/` //TODO: ability to change this?
  static const File templateDir := Env.cur.homeDir+`resources/templates/`
  static const File envTreeDir := Env.cur.homeDir+`resources/trees/`

  static File getTagDir()
  {
    return Env.cur.homeDir+`resources/tags/`
  }

  static File getTemplateDir()
  {
    return Env.cur.homeDir+`resources/templates/`
  }

  static Void newProject(Str projectName)
  {
    //makes the new dir for this
    File pDir := projectDirectory.createDir(projectName)
    pDir.createDir("conns")
    pDir.createDir("trees")
    pDir.createDir("weatherRef")
    pDir.createDir("logs")
    pDir.createDir("indexes")
    pDir.createDir("db").createDir("change")
    pDir.createFile("pw.p")
    pDir.createFile("config.props")
  }

  static Bool exists(Str projectName)
  {
    return getProjectHomeDir(projectName).exists
  }

  static File getProjectHomeDir(Str projectName)
  {
    return (projectDirectory+(projectName+"/").toUri)
  }


  static File getIndexDir(Str projectName)
  {
    return getProjectHomeDir(projectName)+`indexes/`
  }


  static File getTreeDir(Str projectName)
  {
    return getProjectHomeDir(projectName)+`trees/`
  }

  static File getLogDir(Str projectName)
  {
    return getProjectHomeDir(projectName)+`logs/`
  }

<<<<<<< local
  static File getWeatherDir(Str projectName)
  {
    return getProjectHomeDir(projectName)+`weatherRef/`
  }

  static Void createRecFile(File homeDir, Record rec)
=======
  static File getDbDir(Str projectName)
>>>>>>> other
  {
<<<<<<< local
    switch(rec.typeof)
    {
      case Site#:
        OutStream recStream := getSiteDir(homeDir.basename).createFile(rec.id.toStr+rec->ext).out
        XDoc(rec->toXml).write(recStream)
        recStream.close
      case Equip#:
        OutStream recStream := getEquipDir(homeDir.basename).createFile(rec.id.toStr+rec->ext).out
        XDoc(rec->toXml).write(recStream)
        recStream.close
      case Point#:
        OutStream recStream := getPointDir(homeDir.basename).createFile(rec.id.toStr+rec->ext).out
        XDoc(rec->toXml).write(recStream)
        recStream.close
      case Weather#:
        OutStream recStream := getWeatherDir(homeDir.basename).createFile(rec.id.toStr+rec->ext).out
        XDoc(rec->toXml).write(recStream)
        recStream.close
    }
=======
    return getProjectHomeDir(projectName)+`db/`
>>>>>>> other
  }

  static File getChangeDir(Str projectName)
  {
    return getDbDir(projectName)+`change/`
  }

  static File getConnDir(Str projectName)
  {
    return getProjectHomeDir(projectName)+`conns/`
  }

  static Void createRecFile(Project project, Record rec)
  {
    project.database.save(rec)
  }

  static File getTempSiteDir()
  {
    return (getTempProjectHomeDir+`sites/`).create
  }

  static File getTempEquipDir()
  {
    return (getTempProjectHomeDir+`equips/`).create
  }

  static File getTempPointDir()
  {
    return (getTempProjectHomeDir+`points/`).create
  }

  static File getTempProjectHomeDir()
  {
    return (Env.cur.homeDir+`etc/projectBuilder/temp/`).create
  }

  static Void cleanTempDir()
  {
    (Env.cur.homeDir+`etc/projectBuilder/temp/`).delete
  }


  static Void createConnFile(File homeDir, Conn conn)
  {
    OutStream recStream := getConnDir(homeDir.basename).createFile(conn.dis+"."+conn->ext).out
    XDoc(conn->toXml).write(recStream)
    recStream.close
  }

  static File? findConnFile(File homeDir, Conn conn)
  {
    return getConnDir(homeDir.basename).listFiles.find |File f->Bool|{return f.basename == conn.dis}
  }

<<<<<<< local
   static Bool recFileExists(File homeDir, Record rec)
  {
    switch(rec.typeof)
    {
      case Site#:
        File recFile := getSiteDir(homeDir.basename)+(rec.id.toStr+rec->ext).toUri
        return recFile.exists
      case Equip#:
         File recFile := getEquipDir(homeDir.basename)+(rec.id.toStr+rec->ext).toUri
        return recFile.exists
      case Point#:
         File recFile := getPointDir(homeDir.basename)+(rec.id.toStr+rec->ext).toUri
        return recFile.exists
      case Weather#:
         File recFile := getWeatherDir(homeDir.basename)+(rec.id.toStr+rec->ext).toUri
         return recFile.exists
      default:
        return false
    }
  }

  static File? findRecFile(File homeDir, Record rec)
  {
    switch(rec.typeof)
    {
      case Site#:
        File recFile := getSiteDir(homeDir.basename).listFiles.find | File f -> Bool| {return f.basename == rec.id.toStr}
        return recFile
      case Equip#:
         File recFile := getEquipDir(homeDir.basename).listFiles.find | File f -> Bool| {return f.basename == rec.id.toStr}
        return recFile
      case Point#:
         File recFile := getPointDir(homeDir.basename).listFiles.find | File f -> Bool| {return f.basename == rec.id.toStr}
        return recFile
      default:
      File? recfile := null
      recfile = getSiteDir(homeDir.basename).listFiles.find | File f -> Bool| {return f.basename == rec.id.toStr}
      if(recfile != null){return recfile}
      recfile = getEquipDir(homeDir.basename).listFiles.find | File f -> Bool| {return f.basename == rec.id.toStr}
      if(recfile != null){return recfile}
      recfile = getPointDir(homeDir.basename).listFiles.find | File f -> Bool| {return f.basename == rec.id.toStr}
      if(recfile != null){return recfile}
        return null
    }
  }
=======
>>>>>>> other


}