using haystack
using xml

@Serializable
const class Record
{
    const Tag[] data := [,]
    const Ref id := Ref.gen

    new make(|This| f)
    {
      f(this)
      if(data.find |Tag t -> Bool| {return t.name == "id"} == null)
      {
      data = [,].addAll(data).add(TagFactory.getTag("id",id))
      }

    }

    virtual Tag? get(Str name)
    {
      return this.data.find |Obj? obj -> Bool| {obj->name == name}
    }

    Record set(Tag? moddedTag)
    {
      return RecUtil.modRec(this, moddedTag.name, moddedTag)
    }

    Record add(Tag newTag)
    {
      return RecUtil.modRec(this, newTag.name, newTag)
    }

<<<<<<< local
    @Transient
    Record addAll(Tag[] newTags)
=======
    Record? addAll(Tag[] newTags)
>>>>>>> other
    {
      Record? newRec := null
      newTags.each |tag|
      {
      newRec = add(tag)
      }
      return newRec
    }

    Record remove(Str killName)
    {
      return RecUtil.modRec(this, killName)
    }

    XElem toXml()
      {
        recordRoot := XElem("record") {XAttr("id", this.id.toStr),}
        data.each |tag|
        {
          recordRoot.add(tag.toXml)
        }
        return recordRoot
      }

    static Record fromFile(File file)
      {
        return file.readObj
      }


    Dict getDict()
    {
      Str:Obj? dataMap := Str:Obj?[:]
      data.each |tag|
      {
        if(tag.typeof == MarkerTag#)
        {
          dataMap.add(tag.name,Marker.fromStr(tag.name))
        }
        else
        {
          dataMap.add(tag.name,tag.val)
        }
      }
      return Etc.makeDict(dataMap)
    }


}