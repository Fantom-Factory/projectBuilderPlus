using pbpgui
using pbpcore
using concurrent
using fwt
using gfx


class SqlPackageEditPane : EdgePane
{
  Str name
  AtomicRef listRef
  ActorPool newPool
  Instruction pbpIdInstruction
  Instruction parentRefInstruction
  Instruction tagsToMapInstruction
  Instruction additionalTagInstruction
  Instruction[] instructions
  Actor[] updateableActors := [,]
  Watcher[] watches := [,]
  InstructionBox instructionBox

  ButtonGrid buttonGrid := ButtonGrid{}

  new make(Str dis, Tag? parentRef, Tag[] tagsToMap, AtomicRef listRef)
  {
    this.listRef = listRef
    newPool = ActorPool()
    name = dis
    pbpIdInstruction = Instruction(
      "Select Col for Unique Identification",
      "pbpId"
    )

    parentRefInstruction = Instruction(
      "Parent Reference",
      "parentRef"
    )
    if(parentRef!=null){parentRefInstruction.addField(InstructionSmartBox(parentRef))}

    tagsToMapInstruction = Instruction(
      "Tag Mapping",
      "tagMapper"
    )
    GridPane tagsToMapGridPane := GridPane{numCols=4}
    Label tagNameLabel := Label{text="Tag Name"}
    Label colLabel := Label{text="Sql Column to Map"}
    Label defValLabel := Label{text="Default Value"}
    Label regLabel := Label{text="Regular Expression"}
    tagsToMapGridPane.add(tagNameLabel)
    tagsToMapGridPane.add(colLabel)
    tagsToMapGridPane.add(defValLabel)
    tagsToMapGridPane.add(regLabel)
    tagsToMap.each |tag|
    {
     SqlColSelector newselector := SqlColSelector(listRef)
     updateableActors.push(SqlColSelectUpdater(newselector, getWatcher(), newPool))
     updateableActors.peek->send(null)
     Label tagLabel := Label{text=tag.name+"<${tag->kind}>"}

     Text defValText := Text{}

     Text regText := Text{}
     //SqlTagMapper tagMapper := SqlTagMapper(tag, listRef)
     //updateableActors.push(SqlColSelectUpdater(tagMapper.sqlColSelector, getWatcher(), newPool))
     //tagsToMapInstruction.addField(tagMapper)
     //tagsToMapInstruction.addField(ColumnPane{ Text{text=tag.name}, Text{text=tag->kind},})
     tagsToMapGridPane.add(tagLabel)
     tagsToMapGridPane.add(newselector)
     //tagsToMapGridPane.add(defValLabel)
     tagsToMapGridPane.add(defValText)
     //tagsToMapGridPane.add(regLabel)
     tagsToMapGridPane.add(regText)
    }
    tagsToMapInstruction.addField(tagsToMapGridPane)

    additionalTagInstruction = Instruction(
      "Additional Tags",
      "addTags"
    )

    additionalTagInstruction.addField(Button(AddRegexRuleCommand(this)))
    additionalTagInstruction.addField(Button{text="New Str Match Rule"})

    instructions = [pbpIdInstruction, parentRefInstruction, tagsToMapInstruction, additionalTagInstruction]

    instructionBox = InstructionBox(dis, instructions, true)
    center = instructionBox
    bottom = buttonGrid
  }

  Void addButton(Button button)
  {
    buttonGrid.numCols++
    buttonGrid.add(button)
  }

  Void addeTagMapper(Tag tag)
  {
    SqlTagMapper tagMapper := SqlTagMapper(tag, listRef)
    updateableActors.push(SqlColSelectUpdater(tagMapper.sqlColSelector, getWatcher(), newPool))
    updateableActors.peek->send(null)
    tagsToMapInstruction.addField(tagMapper)
    //tagsToMapInstruction.addField(Text{text=tag.name})
    return
  }

  Void notifyChange()
  {
    watches.each |watch|
    {
      watch.set()
    }
    return
  }

  Watcher getWatcher()
  {
    watches.push(Watcher())
    return watches.peek()
  }


}